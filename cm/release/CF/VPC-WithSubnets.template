 {
	"AWSTemplateFormatVersion" : "2010-09-09",
	"Description" : "Rean AWS Ansible Wordpress Sample - Ansible install on default Amazon Linux base image",
	"Resources" : {
		"MyVPC" : {
			"Type" : "AWS::EC2::VPC",
			"Description" : "Isolated VPC for Ansible + Wordpress",
			"Properties": {
				"EnableDnsSupport": true,
				"EnableDnsHostnames": true,
				"InstanceTenancy": "default",
				"CidrBlock" : { "Ref" : "VpcCidr" }
			}
		},
		"InternetGateway" : {
			"Type" : "AWS::EC2::InternetGateway",
				"Properties" : {
				"Tags" : [
					{ "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
					{ "Key" : "Network", "Value" : "Public" }
				]
			}
		},
		"InternetGatewayAttachment" : {
			"Type" : "AWS::EC2::VPCGatewayAttachment",
			"Properties" : {
				"VpcId" : { "Ref" : "MyVPC" },
				"InternetGatewayId" : { "Ref" : "InternetGateway" }
			}
		},
		"PublicSubnet" : {
			"Type" : "AWS::EC2::Subnet",
			"Properties" : {
				"AvailabilityZone" : { "Ref" : "AvailabilityZone" },
				"CidrBlock" : { "Ref" : "PublicSubnetCidr" },
				"MapPublicIpOnLaunch" : true,
				"VpcId" : { "Ref" : "MyVPC" },
				"Tags" : [
					{ "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
					{ "Key" : "Name", "Value" : "Public" }
				]
			}
		},
		"PublicRouteTable" : {
			"Type" : "AWS::EC2::RouteTable",
			"DependsOn" : [ "MyVPC" ],
			"Properties" : {
				"VpcId" : { "Ref" : "MyVPC" },
				"Tags" : [
					{ "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
					{ "Key" : "Network", "Value" : "Public" }
				],
				"Tags" : [
					{ "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
					{ "Key" : "Name", "Value" : "Public" }
				]
			}
		},
		"PublicRoute" : {
			"Type" : "AWS::EC2::Route",
			"DependsOn" : [ "InternetGatewayAttachment", "PublicRouteTable" ],
			"Properties" : {
				"RouteTableId" : { "Ref" : "PublicRouteTable" },
				"DestinationCidrBlock" : "0.0.0.0/0",
				"GatewayId" : { "Ref" : "InternetGateway" }
			}
		},
		"PublicSubnetRouteTableAssociation" : {
			"Type" : "AWS::EC2::SubnetRouteTableAssociation",
			"DependsOn" : [ "PublicRouteTable", "PublicSubnet" ],
			"Properties" : {
				"SubnetId" : { "Ref" : "PublicSubnet" },
				"RouteTableId" : { "Ref" : "PublicRouteTable" }
			}
		},
		"PublicSecurityGroup" : {
			"Type" : "AWS::EC2::SecurityGroup",
			"Properties" : {
				"GroupDescription" : "Enable SSH and HTTP/S for WP server",
				"VpcId" : { "Ref" : "MyVPC" },
				"SecurityGroupIngress" : [ {
					"IpProtocol" : "tcp",
					"FromPort" : "22",
					"ToPort" : "22",
					"CidrIp" : "0.0.0.0/0"
				}, {
					"IpProtocol" : "tcp",
					"FromPort" : "80",
					"ToPort" : "80",
					"CidrIp" : "0.0.0.0/0"
				}, {
					"IpProtocol" : "tcp",
					"FromPort" : "443",
					"ToPort" : "443",
					"CidrIp" : "0.0.0.0/0"
				} ],
				"SecurityGroupEgress": [ {
					"IpProtocol": "-1",
					"CidrIp": "0.0.0.0/0"
				} ],
				"Tags" : [
					{ "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
					{ "Key" : "Name", "Value" : "Public" }
				]
			}
		},
		"PrivateSubnet" : {
			"Type" : "AWS::EC2::Subnet",
			"Properties" : {
				"AvailabilityZone" : { "Ref" : "AvailabilityZone" },
				"CidrBlock" : { "Ref" : "PrivateSubnetCidr" },
				"MapPublicIpOnLaunch" : true,
				"VpcId" : { "Ref" : "MyVPC" },
				"Tags" : [
					{ "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
					{ "Key" : "Name", "Value" : "Private" }
				]
			}
		},
		"PrivateRouteTable" : {
			"Type" : "AWS::EC2::RouteTable",
			"DependsOn" : [ "MyVPC" ],
			"Properties" : {
				"VpcId" : { "Ref" : "MyVPC" },
				"Tags" : [
					{ "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
					{ "Key" : "Network", "Value" : "Private" }
				]
			}
		},
		"PrivateRoute" : {
			"Type" : "AWS::EC2::Route",
			"DependsOn" : [ "InternetGatewayAttachment", "PrivateRouteTable" ],
			"Properties" : {
				"RouteTableId" : { "Ref" : "PrivateRouteTable" },
				"DestinationCidrBlock" : "0.0.0.0/0",
				"GatewayId" : { "Ref" : "InternetGateway" }
			}
		},
		"PrivateSubnetRouteTableAssociation" : {
			"Type" : "AWS::EC2::SubnetRouteTableAssociation",
			"DependsOn" : [ "PrivateRouteTable", "PrivateSubnet" ],
			"Properties" : {
				"SubnetId" : { "Ref" : "PrivateSubnet" },
				"RouteTableId" : { "Ref" : "PrivateRouteTable" }
			}
		},
		"PrivateSecurityGroup" : {
			"Type" : "AWS::EC2::SecurityGroup",
			"Properties" : {
				"GroupDescription" : "Enable SSH",
				"VpcId" : { "Ref" : "MyVPC" },
				"SecurityGroupIngress" : [ {
					"IpProtocol" : "tcp",
					"FromPort" : "22",
					"ToPort" : "22",
					"CidrIp" : "0.0.0.0/0"
				} ],
				"Tags" : [
					{ "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
					{ "Key" : "Name", "Value" : "Private" }
				]
			}
		},
		"WebServer" : {
			"Type" : "AWS::EC2::Instance",
			"Description" : "Web server where ansible will install wordpress",
			"DependsOn" : [ "PublicSubnet", "PublicRoute" ],
			"Metadata" : {
				"AWS::CloudFormation::Init" : {
				  "configSets" : {
					"wordpress_install" : ["install_cfn", "install_wordpress", "configure_wordpress" ]
				  },
				  "install_cfn" : {
					"files": {
					  "/etc/cfn/cfn-hup.conf": {
						"content": { "Fn::Join": [ "", [
						  "[main]\n",
						  "stack=", { "Ref": "AWS::StackId" }, "\n",
						  "region=", { "Ref": "AWS::Region" }, "\n"
						]]},
						"mode"  : "000400",
						"owner" : "root",
						"group" : "root"
					  },
					  "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
						"content": { "Fn::Join": [ "", [
						  "[cfn-auto-reloader-hook]\n",
						  "triggers=post.update\n",
						  "path=Resources.WebServer.Metadata.AWS::CloudFormation::Init\n",
						  "action=/opt/aws/bin/cfn-init -v ",
								  "         --stack ", { "Ref" : "AWS::StackName" },
								  "         --resource WebServer ",
								  "         --configsets wordpress_install ",
								  "         --region ", { "Ref" : "AWS::Region" }, "\n"
						]]},          
						"mode"  : "000400",
						"owner" : "root",
						"group" : "root"
					  }
					},
					"services" : {
					  "sysvinit" : {
						"cfn-hup" : { "enabled" : "true", "ensureRunning" : "true",
									  "files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"] }
					  }
					}
				  },

				  "install_wordpress" : {
					"packages" : {
					  "yum" : {
						"php"          : [],
						"php-mysql"    : [],
						"mysql"        : [],
						"mysql-server" : [],
						"mysql-devel"  : [],
						"mysql-libs"   : [],
						"httpd"        : []
					  }
					},
					"sources" : {
					  "/var/www/html" : "http://wordpress.org/latest.tar.gz"
					},
					"files" : {
					  "/tmp/setup.mysql" : {
						"content" : { "Fn::Join" : ["", [
						  "CREATE DATABASE ", { "Ref" : "DBName" }, ";\n",
						  "CREATE USER '", { "Ref" : "DBUser" }, "'@'localhost' IDENTIFIED BY '", { "Ref" : "DBPassword" }, "';\n",
						  "GRANT ALL ON ", { "Ref" : "DBName" }, ".* TO '", { "Ref" : "DBUser" }, "'@'localhost';\n",
						  "FLUSH PRIVILEGES;\n"
						]]},
						"mode"  : "000400",
						"owner" : "root",
						"group" : "root"
					  },

					  "/tmp/create-wp-config" : {
						"content" : { "Fn::Join" : [ "", [
						  "#!/bin/bash -xe\n",
						  "cp /var/www/html/wordpress/wp-config-sample.php /var/www/html/wordpress/wp-config.php\n",
						  "sed -i \"s/'database_name_here'/'",{ "Ref" : "DBName" }, "'/g\" wp-config.php\n",
						  "sed -i \"s/'username_here'/'",{ "Ref" : "DBUser" }, "'/g\" wp-config.php\n",
						  "sed -i \"s/'password_here'/'",{ "Ref" : "DBPassword" }, "'/g\" wp-config.php\n"
						]]},
						"mode" : "000500",
						"owner" : "root",
						"group" : "root"
					  }
					},
					"services" : {
					  "sysvinit" : {
						"httpd"  : { "enabled" : "true", "ensureRunning" : "true" },
						"mysqld" : { "enabled" : "true", "ensureRunning" : "true" }
					  }
					}
				  },

				  "configure_wordpress" : {
					"commands" : {
					  "01_set_mysql_root_password" : {
						"command" : { "Fn::Join" : ["", ["mysqladmin -u root password '", { "Ref" : "DBRootPassword" }, "'"]]},
						"test" : { "Fn::Join" : ["", ["$(mysql ", { "Ref" : "DBName" }, " -u root --password='", { "Ref" : "DBRootPassword" }, "' >/dev/null 2>&1 </dev/null); (( $? != 0 ))"]]}
					  },
					  "02_create_database" : {
						"command" : { "Fn::Join" : ["", ["mysql -u root --password='", { "Ref" : "DBRootPassword" }, "' < /tmp/setup.mysql"]]},
						"test" : { "Fn::Join" : ["", ["$(mysql ", { "Ref" : "DBName" }, " -u root --password='", { "Ref" : "DBRootPassword" }, "' >/dev/null 2>&1 </dev/null); (( $? != 0 ))"]]}
					  },
					  "03_configure_wordpress" : {
						"command" : "/tmp/create-wp-config",
						"cwd" : "/var/www/html/wordpress"
					  }
					}
				  }
				}
			  },
			"Properties" : {
				"ImageId" : "ami-5fb8c835",
				"AvailabilityZone" : { "Ref" : "AvailabilityZone" },
				"InstanceType" : { "Ref" : "InstanceType" },
				"KeyName" : { "Ref" : "KeyPair" },
				"NetworkInterfaces" : [ {
					"GroupSet" : [ { "Ref" : "PublicSecurityGroup" } ],
					"AssociatePublicIpAddress" : true,
					"DeleteOnTermination" : true,
					"SubnetId" : { "Ref" : "PublicSubnet" },
					"DeviceIndex" : 0
				} ],
				"Tags" : [ 
					{ "Key" : "Name", "Value" : "Wordpress" } ,
					{ "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
					{ "Key" : "Network", "Value" : "Public" }
				],
				  "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
                       "#!/bin/bash -xe\n",
                       "yum update -y aws-cfn-bootstrap\n",

                       "/opt/aws/bin/cfn-init -v ",
                       "         --stack ", { "Ref" : "AWS::StackName" },
                       "         --resource WebServer ",
                       "         --configsets wordpress_install ",
                       "         --region ", { "Ref" : "AWS::Region" }, "\n",

                       "/opt/aws/bin/cfn-signal -e $? ",
                       "         --stack ", { "Ref" : "AWS::StackName" },
                       "         --resource WebServer ",
                       "         --region ", { "Ref" : "AWS::Region" }, "\n"
				  ]]}}
			},
			"CreationPolicy" : {
				"ResourceSignal" : {
				  "Timeout" : "PT15M"
				}
			  }
		},
		"AnsibleServer" : {
			"Type" : "AWS::EC2::Instance",
			"Description" : "Amazon Linux base image plus user data to install ansible and git",
			"DependsOn" : [ "PrivateSubnet", "PrivateRoute" ],
			"Properties" : {
				"ImageId" : "ami-5fb8c835",
				"AvailabilityZone" : { "Fn::GetAtt" : [ "PrivateSubnet", "AvailabilityZone" ] },
				"InstanceType" : { "Ref" : "InstanceType" },
				"KeyName" : { "Ref" : "KeyPair" },
				"NetworkInterfaces" : [{
					"GroupSet"                 : [{ "Ref" : "PrivateSecurityGroup" }],
					"AssociatePublicIpAddress" : true,
					"DeleteOnTermination"      : true,
					"SubnetId"                 : { "Ref" : "PrivateSubnet" },
					"DeviceIndex" : 0
				}],
				"Tags" : [
					{ "Key" : "Name", "Value" : "CM Controller" },
					{ "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
					{ "Key" : "Network", "Value" : "Private" }
				],
				"UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
					"#!/bin/bash -xe\n",
					"yum update -y\n",
					"easy_install pip\n",
					"pip install ansible\n",
					"yum install git python-boto -y\n",
					"echo '[Credentials]' >> /etc/boto.cfg\n",
					"echo 'aws_access_key_id = ", { "Ref" : "ApiKey" }, "' >> /etc/boto.cfg\n",
					"echo 'aws_secret_access_key_id = ", { "Ref" : "ApiSecret" }, "' >> /etc/boto.cfg\n"
				]]}}
			}
		}
	},
	"Outputs" : {
		"WebsiteURL" : {
		  "Value" : { "Fn::Join" : ["", ["http://", { "Fn::GetAtt" : [ "WebServer", "PublicDnsName" ]}, "/wordpress" ]]},
		  "Description" : "WordPress Website"
		}
	},
	"Parameters" : {
		"PrivateSubnetCidr" : {
			"Type" : "String",
			"Default" : "10.0.1.0/24"
		},
		"PublicSubnetCidr" : {
			"Type" : "String",
			"Default" : "10.0.11.0/24"
		},
		"VpcCidr" : {
			"Type" : "String",
			"Default" : "10.0.0.0/16"
		},
		"AvailabilityZone" : {
			"Type" : "String",
			"Description" : "Resource Location",
			"Default" : "us-east-1b",
			"AllowedPattern" : "[a-z]{2}-[a-z]{2,5}-[0-9]{1}[a-z]{1}",
			"ConstraintDescription" : "Specify a valid zone (e.g. us-east-1b)"
		},
		"InstanceType" : {
			"Type" : "String",
			"Default" : "t1.micro",
			"AllowedPattern" : "[a-z]{1}[1-3]{1}.[a-z]{3,}",
			"ConstraintDescription" : "Specify a valid instance type (e.g. t1.micro)"
		},
		"KeyPair" : {
			"Type" : "AWS::EC2::KeyPair::KeyName",
			"Description" : "Amazon EC2 Key Pair"
		},
		"Password" : {
			"Type" : "String",
			"Description" : "Administrator Password",
			"NoEcho" : true,
			"AllowedPattern" : ".{9,}",
			"Default" : "09a12z87b34y",
			"ConstraintDescription" : "Password must be at least 9 characters"
		},
		"ApiKey" : {
			"Type" : "String",
			"Description" : "The AWS API key to enable ansible to manage the environment",
			"NoEcho" : true,
			"AllowedPattern" : ".+",
			"Default" : "x",
			"ConstraintDescription" : "You must specify a valid API key"
		},
		"ApiSecret" : {
			"Type" : "String",
			"Description" : "The AWS API secret to enable ansible to manage the environment",
			"NoEcho" : true,
			"AllowedPattern" : ".+",
			"Default" : "y",
			"ConstraintDescription" : "You must specify a valid API secret"
		},
		"DBName" : {
			"Default": "wordpress",
			"Description" : "The WordPress database name",
			"Type": "String",
			"MinLength": "1",
			"MaxLength": "64",
			"AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
			"ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
		},
		"DBUser" : {
			"Default" : "wpuser",
			"Description" : "The WordPress database admin account username",
			"Type": "String",
			"MinLength": "1",
			"MaxLength": "16",
			"AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
			"ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
		},
		"DBPassword" : {
			"NoEcho": "true",
			"Description" : "The WordPress database admin account password",
			"Type": "String",
			"MinLength": "8",
			"MaxLength": "41",
			"AllowedPattern" : "[a-zA-Z0-9]*",
			"ConstraintDescription" : "must contain only alphanumeric characters."
		},
		"DBRootPassword" : {
			"NoEcho": "true",
			"Description" : "MySQL root password",
			"Type": "String",
			"MinLength": "8",
			"MaxLength": "41",
			"AllowedPattern" : "[a-zA-Z0-9]*",
			"ConstraintDescription" : "must contain only alphanumeric characters."
		}
	}
}